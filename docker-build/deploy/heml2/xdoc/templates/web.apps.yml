{{ $api :=.Values.webApi -}} 
{{ $storage :=.Values.storage}} 
{{ $storage_files :=.Values.storage_files -}}
{{ $config := .Values.config}}
{{ if $api}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{$api.name}}
spec:
  selector:
    matchLabels:
      app: {{$api.name}}
  replicas: {{$api.replicas}}
  template:
    metadata:
      labels:
        app: {{$api.name}}
    spec:
      imagePullSecrets:
       - name: harbor-secret-registry
      volumes:
      - name: {{$storage.name}}
      {{if $storage.className }}
        persistentVolumeClaim:
          claimName: {{$storage.name}}
      {{else if $storage.hostPath }}
        hostPath:
          path: {{ $storage.hostPath  }}
          type: DirectoryOrCreate
      {{else}}
        nfs:
          server: {{$storage.server}}
          path: {{$storage.directory}}
      {{end}}     
      - name: {{$storage_files.name}}
      {{if $storage_files.className }}
        persistentVolumeClaim:
          claimName: {{$storage_files.name}}
      {{else if $storage_files.hostPath }}
        hostPath:
          path: {{ $storage_files.hostPath  }}
          type: DirectoryOrCreate
      {{else}}
        nfs:
          server: {{$storage_files.server}}
          path: {{$storage_files.directory}}
      {{end}}
      containers:
        - args:
            - python3
            - /app/cy_xdoc/server.py
            - bind=0.0.0.0:80
            - content_segment_len=9
            - host_url='{{$api.hostUrl}}'
            - elastic_search.server=$(elastic_search.server)
            - elastic_search.prefix_index=$(elastic_search.prefix_index)
            - db=$(db)
            - admin_db_name=$(admin_db_name)
            - rabbitmq.server=$(rabbitmq.server)
            - rabbitmq.port=$(rabbitmq.port)
            - rabbitmq.msg=$(rabbitmq.msg)
            - cache_server=$(cache_server)
            - workers=$(workers)
            - server_type=$(server_type.hypercorn)
            - worker_class=$(worker_class.trio)
            - timeout_keep_alive=$(timeout_keep_alive)
            - timeout_graceful_shutdown=$(timeout_graceful_shutdown)
            - h2_max_concurrent_streams=$(h2_max_concurrent_streams)
            - vn_suggest_url=$(vn_suggest_url)
            - tika_server=$(tika_server)
            - file_storage_path=/mnt/files
            {{if not $storage_files}}
            - services=""
            {{end}}
          image: {{ $api.images}}
          envFrom:
            - configMapRef:
               name: {{$config.configMapName}}
          name: {{$api.name}}
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath:  {{$storage.mountPath}}
              name: {{$storage.name}}
            {{ if $storage_files }}
            - mountPath: /mnt/files
              name: {{$storage_files.name}}
            {{end}}
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
 name: {{$api.name}}
 labels:
   app: {{$api.name}}
spec:
#  type: NodePort
 selector:
   app: {{$api.name}}
 ports:
 - port: 8082
   targetPort: 80
   protocol: TCP
{{end}}